// <auto-generated />
using System;
using FightManagerWebAPI.Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FightManagerWebAPI.Migrations
{
    [DbContext(typeof(DndFightManagerContext))]
    partial class DndFightManagerContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("FightManagerWebAPI.Entities.Ability", b =>
                {
                    b.Property<int>("AbilityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AbilityId"));

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("AbilityId");

                    b.ToTable("Ability", (string)null);
                });

            modelBuilder.Entity("FightManagerWebAPI.Entities.AbilityList", b =>
                {
                    b.Property<int>("AbilityListId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AbilityListId"));

                    b.Property<int>("AbilityFk")
                        .HasColumnType("int")
                        .HasColumnName("AbilityFK");

                    b.Property<int>("BeastNoteFk")
                        .HasColumnType("int")
                        .HasColumnName("BeastNoteFK");

                    b.Property<bool>("SavingThrowProficiency")
                        .HasColumnType("bit");

                    b.Property<int>("Value")
                        .HasColumnType("int");

                    b.HasKey("AbilityListId");

                    b.HasIndex("AbilityFk");

                    b.HasIndex("BeastNoteFk");

                    b.ToTable("AbilityList", (string)null);
                });

            modelBuilder.Entity("FightManagerWebAPI.Entities.Action", b =>
                {
                    b.Property<int>("ActionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ActionId"));

                    b.Property<int>("ActionResourceFk")
                        .HasColumnType("int")
                        .HasColumnName("ActionResourceFK");

                    b.Property<int>("BeastNoteFk")
                        .HasColumnType("int")
                        .HasColumnName("BeastNoteFK");

                    b.Property<int?>("Cooldown1ShellSlotLevel")
                        .HasColumnType("int")
                        .HasColumnName("Cooldown1_ShellSlotLevel");

                    b.Property<int?>("Cooldown2DiceSize")
                        .HasColumnType("int")
                        .HasColumnName("Cooldown2_DiceSize");

                    b.Property<int?>("Cooldown2LowerRangeLimit")
                        .HasColumnType("int")
                        .HasColumnName("Cooldown2_LowerRangeLimit");

                    b.Property<int?>("Cooldown2UpperRangeLimit")
                        .HasColumnType("int")
                        .HasColumnName("Cooldown2_UpperRangeLimit");

                    b.Property<int?>("Cooldown3HowManyTimes")
                        .HasColumnType("int")
                        .HasColumnName("Cooldown3_HowManyTimes");

                    b.Property<int?>("Cooldown3MeasureMultiply")
                        .HasColumnType("int")
                        .HasColumnName("Cooldown3_MeasureMultiply");

                    b.Property<int?>("Cooldown3TimeMeasureFk")
                        .HasColumnType("int")
                        .HasColumnName("Cooldown3_TimeMeasureFK");

                    b.Property<int>("CooldownTypeFk")
                        .HasColumnType("int")
                        .HasColumnName("CooldownTypeFK");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(8000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8000)");

                    b.Property<bool>("IsTemplate")
                        .HasColumnType("bit");

                    b.Property<int?>("LairInitiativeBonus")
                        .HasColumnType("int")
                        .HasColumnName("Lair_InitiativeBonus");

                    b.Property<int?>("ParentMultiactionFk")
                        .HasColumnType("int")
                        .HasColumnName("ParentMultiactionFK");

                    b.Property<string>("ReactionCondition")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("Reaction_Condition");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("ActionId");

                    b.HasIndex("ActionResourceFk");

                    b.HasIndex("BeastNoteFk");

                    b.HasIndex("Cooldown3TimeMeasureFk");

                    b.HasIndex("CooldownTypeFk");

                    b.ToTable("Action", (string)null);
                });

            modelBuilder.Entity("FightManagerWebAPI.Entities.ActionResource", b =>
                {
                    b.Property<int>("ActionResourceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ActionResourceId"));

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("ActionResourceId");

                    b.ToTable("ActionResource", (string)null);
                });

            modelBuilder.Entity("FightManagerWebAPI.Entities.ActionResourceList", b =>
                {
                    b.Property<int>("ActionResourceListId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ActionResourceListId"));

                    b.Property<int>("ActionResourceFk")
                        .HasColumnType("int")
                        .HasColumnName("ActionResourceFK");

                    b.Property<bool>("Available")
                        .HasColumnType("bit");

                    b.Property<int>("BeastFk")
                        .HasColumnType("int")
                        .HasColumnName("BeastFK");

                    b.HasKey("ActionResourceListId");

                    b.HasIndex("ActionResourceFk");

                    b.HasIndex("BeastFk");

                    b.ToTable("ActionResourceList", (string)null);
                });

            modelBuilder.Entity("FightManagerWebAPI.Entities.Alignment", b =>
                {
                    b.Property<int>("AlignmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AlignmentId"));

                    b.Property<int>("Goodness")
                        .HasColumnType("int");

                    b.Property<int>("Law")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("AlignmentId");

                    b.ToTable("Alignment", (string)null);
                });

            modelBuilder.Entity("FightManagerWebAPI.Entities.Beast", b =>
                {
                    b.Property<int>("BeastId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BeastId"));

                    b.Property<int>("BeastNoteFk")
                        .HasColumnType("int")
                        .HasColumnName("BeastNoteFK");

                    b.Property<int>("CurrentArmorClass")
                        .HasColumnType("int");

                    b.Property<string>("CurrentInitiative")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<int>("FightTeamFk")
                        .HasColumnType("int")
                        .HasColumnName("FightTeamFK");

                    b.Property<int>("MaxHitPoint")
                        .HasColumnType("int");

                    b.Property<int>("TemporaryHitPoints")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.HasKey("BeastId");

                    b.HasIndex("BeastNoteFk");

                    b.HasIndex("FightTeamFk");

                    b.ToTable("Beast", (string)null);
                });

            modelBuilder.Entity("FightManagerWebAPI.Entities.BeastList", b =>
                {
                    b.Property<int>("BeastListId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BeastListId"));

                    b.Property<int>("BeastFk")
                        .HasColumnType("int")
                        .HasColumnName("BeastFK");

                    b.Property<int>("SceneSaveFk")
                        .HasColumnType("int")
                        .HasColumnName("SceneSaveFK");

                    b.HasKey("BeastListId");

                    b.HasIndex("BeastFk");

                    b.HasIndex("SceneSaveFk");

                    b.ToTable("BeastList", (string)null);
                });

            modelBuilder.Entity("FightManagerWebAPI.Entities.BeastNote", b =>
                {
                    b.Property<int>("BeastNoteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BeastNoteId"));

                    b.Property<int>("ActualUses")
                        .HasColumnType("int");

                    b.Property<int>("AlingmentFk")
                        .HasColumnType("int")
                        .HasColumnName("AlingmentFK");

                    b.Property<int>("AllUses")
                        .HasColumnType("int");

                    b.Property<int>("ArmorClass")
                        .HasColumnType("int");

                    b.Property<int>("BeastTypeFk")
                        .HasColumnType("int")
                        .HasColumnName("BeastTypeFK");

                    b.Property<int>("ChallengeRating")
                        .HasColumnType("int");

                    b.Property<DateOnly>("CreationDate")
                        .HasColumnType("date");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<DateOnly>("EditingDate")
                        .HasColumnType("date");

                    b.Property<string>("HitPointDice")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<byte[]>("Image")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<int>("InitiativeBonus")
                        .HasColumnType("int");

                    b.Property<int>("SizeFk")
                        .HasColumnType("int")
                        .HasColumnName("SizeFK");

                    b.Property<int>("SpecialBonus")
                        .HasColumnType("int");

                    b.Property<int?>("SpellingInfoFk")
                        .HasColumnType("int")
                        .HasColumnName("SpellingInfoFK");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("UserFk")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("UserFK");

                    b.HasKey("BeastNoteId");

                    b.HasIndex("AlingmentFk");

                    b.HasIndex("BeastTypeFk");

                    b.HasIndex("SizeFk");

                    b.HasIndex("SpellingInfoFk");

                    b.HasIndex("UserFk");

                    b.ToTable("BeastNote", (string)null);
                });

            modelBuilder.Entity("FightManagerWebAPI.Entities.BeastType", b =>
                {
                    b.Property<int>("BeastTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BeastTypeId"));

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("BeastTypeId");

                    b.ToTable("BeastType", (string)null);
                });

            modelBuilder.Entity("FightManagerWebAPI.Entities.Condition", b =>
                {
                    b.Property<int>("ConditionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ConditionId"));

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("ConditionId");

                    b.ToTable("Condition", (string)null);
                });

            modelBuilder.Entity("FightManagerWebAPI.Entities.ConditionImmuneList", b =>
                {
                    b.Property<int>("ConditionImmuneListId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ConditionImmuneListId"));

                    b.Property<int>("BeastNoteFk")
                        .HasColumnType("int")
                        .HasColumnName("BeastNoteFK");

                    b.Property<int>("ConditionFk")
                        .HasColumnType("int")
                        .HasColumnName("ConditionFK");

                    b.HasKey("ConditionImmuneListId");

                    b.HasIndex("BeastNoteFk");

                    b.HasIndex("ConditionFk");

                    b.ToTable("ConditionImmuneList", (string)null);
                });

            modelBuilder.Entity("FightManagerWebAPI.Entities.ConditionList", b =>
                {
                    b.Property<int>("ConditionListId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ConditionListId"));

                    b.Property<int>("BeastFk")
                        .HasColumnType("int")
                        .HasColumnName("BeastFK");

                    b.Property<int>("ConditionFk")
                        .HasColumnType("int")
                        .HasColumnName("ConditionFK");

                    b.Property<int?>("RoundCount")
                        .HasColumnType("int");

                    b.HasKey("ConditionListId");

                    b.HasIndex("BeastFk");

                    b.HasIndex("ConditionFk");

                    b.ToTable("ConditionList", (string)null);
                });

            modelBuilder.Entity("FightManagerWebAPI.Entities.CooldownType", b =>
                {
                    b.Property<int>("CooldownTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CooldownTypeId"));

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("CooldownTypeId")
                        .HasName("PK_Cooldown");

                    b.ToTable("CooldownType", (string)null);
                });

            modelBuilder.Entity("FightManagerWebAPI.Entities.CreatorsTeam", b =>
                {
                    b.Property<int>("CreatorsTeamId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CreatorsTeamId"));

                    b.Property<bool>("IsCommunityCreators")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("CreatorsTeamId");

                    b.ToTable("CreatorsTeam", (string)null);
                });

            modelBuilder.Entity("FightManagerWebAPI.Entities.DamageTendency", b =>
                {
                    b.Property<int>("DamageTendencyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DamageTendencyId"));

                    b.Property<int>("BeastNoteFk")
                        .HasColumnType("int")
                        .HasColumnName("BeastNoteFK");

                    b.Property<int>("DamageTendencyTypeFk")
                        .HasColumnType("int")
                        .HasColumnName("DamageTendencyTypeFK");

                    b.Property<int>("DamageTypeFk")
                        .HasColumnType("int")
                        .HasColumnName("DamageTypeFK");

                    b.Property<bool>("Magical")
                        .HasColumnType("bit");

                    b.Property<bool>("NonMagical")
                        .HasColumnType("bit");

                    b.HasKey("DamageTendencyId");

                    b.HasIndex("BeastNoteFk");

                    b.HasIndex("DamageTendencyTypeFk");

                    b.HasIndex("DamageTypeFk");

                    b.ToTable("DamageTendency", (string)null);
                });

            modelBuilder.Entity("FightManagerWebAPI.Entities.DamageTendencyType", b =>
                {
                    b.Property<int>("DamageTendencyTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DamageTendencyTypeId"));

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("DamageTendencyTypeId");

                    b.ToTable("DamageTendencyType", (string)null);
                });

            modelBuilder.Entity("FightManagerWebAPI.Entities.DamageType", b =>
                {
                    b.Property<int>("DamageTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DamageTypeId"));

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("DamageTypeId");

                    b.ToTable("DamageType", (string)null);
                });

            modelBuilder.Entity("FightManagerWebAPI.Entities.FightTeam", b =>
                {
                    b.Property<int>("FightTeamId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FightTeamId"));

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("FightTeamId");

                    b.ToTable("FightTeam", (string)null);
                });

            modelBuilder.Entity("FightManagerWebAPI.Entities.Habitat", b =>
                {
                    b.Property<int>("HabitatId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("HabitatId"));

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("HabitatId");

                    b.ToTable("Habitat", (string)null);
                });

            modelBuilder.Entity("FightManagerWebAPI.Entities.HabitatList", b =>
                {
                    b.Property<int>("HabitatListId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("HabitatListId"));

                    b.Property<int>("BeastNoteFk")
                        .HasColumnType("int")
                        .HasColumnName("BeastNoteFK");

                    b.Property<int>("HabitatFk")
                        .HasColumnType("int")
                        .HasColumnName("HabitatFK");

                    b.HasKey("HabitatListId");

                    b.HasIndex("BeastNoteFk");

                    b.HasIndex("HabitatFk");

                    b.ToTable("HabitatList", (string)null);
                });

            modelBuilder.Entity("FightManagerWebAPI.Entities.Scene", b =>
                {
                    b.Property<int>("SceneId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SceneId"));

                    b.Property<int>("SettingFk")
                        .HasColumnType("int")
                        .HasColumnName("SettingFK");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("UserFk")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("UserFK");

                    b.HasKey("SceneId");

                    b.HasIndex("SettingFk");

                    b.HasIndex("UserFk");

                    b.ToTable("Scene", (string)null);
                });

            modelBuilder.Entity("FightManagerWebAPI.Entities.SceneSave", b =>
                {
                    b.Property<int>("SceneSaveId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SceneSaveId"));

                    b.Property<DateOnly>("CreationDate")
                        .HasColumnType("date");

                    b.Property<string>("CurrentBeastInitiative")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<int>("SceneFk")
                        .HasColumnType("int")
                        .HasColumnName("SceneFK");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("SceneSaveId");

                    b.HasIndex("SceneFk");

                    b.ToTable("SceneSave", (string)null);
                });

            modelBuilder.Entity("FightManagerWebAPI.Entities.Sense", b =>
                {
                    b.Property<int>("SenseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SenseId"));

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("SenseId");

                    b.ToTable("Sense", (string)null);
                });

            modelBuilder.Entity("FightManagerWebAPI.Entities.SenseList", b =>
                {
                    b.Property<int>("SenseListId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SenseListId"));

                    b.Property<int>("BeastNoteFk")
                        .HasColumnType("int")
                        .HasColumnName("BeastNoteFK");

                    b.Property<int>("DistanceInFeet")
                        .HasColumnType("int");

                    b.Property<int>("SenseFk")
                        .HasColumnType("int")
                        .HasColumnName("SenseFK");

                    b.HasKey("SenseListId");

                    b.HasIndex("BeastNoteFk");

                    b.HasIndex("SenseFk");

                    b.ToTable("SenseList", (string)null);
                });

            modelBuilder.Entity("FightManagerWebAPI.Entities.Setting", b =>
                {
                    b.Property<int>("SettingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SettingId"));

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("SettingId");

                    b.ToTable("Setting", (string)null);
                });

            modelBuilder.Entity("FightManagerWebAPI.Entities.Size", b =>
                {
                    b.Property<int>("SizeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SizeId"));

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("SizeId");

                    b.ToTable("Size", (string)null);
                });

            modelBuilder.Entity("FightManagerWebAPI.Entities.Skill", b =>
                {
                    b.Property<int>("SkillId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SkillId"));

                    b.Property<int>("AbilityFk")
                        .HasColumnType("int")
                        .HasColumnName("AbilityFK");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("SkillId");

                    b.HasIndex("AbilityFk");

                    b.ToTable("Skill", (string)null);
                });

            modelBuilder.Entity("FightManagerWebAPI.Entities.SkillList", b =>
                {
                    b.Property<int>("SkillListId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SkillListId"));

                    b.Property<int>("BeastNoteFk")
                        .HasColumnType("int")
                        .HasColumnName("BeastNoteFK");

                    b.Property<bool>("Proficiency")
                        .HasColumnType("bit");

                    b.Property<int>("SkillFk")
                        .HasColumnType("int")
                        .HasColumnName("SkillFK");

                    b.Property<int>("Value")
                        .HasColumnType("int");

                    b.HasKey("SkillListId");

                    b.HasIndex("BeastNoteFk");

                    b.HasIndex("SkillFk");

                    b.ToTable("SkillList", (string)null);
                });

            modelBuilder.Entity("FightManagerWebAPI.Entities.Speed", b =>
                {
                    b.Property<int>("SpeedId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SpeedId"));

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("SpeedId");

                    b.ToTable("Speed", (string)null);
                });

            modelBuilder.Entity("FightManagerWebAPI.Entities.SpeedList", b =>
                {
                    b.Property<int>("SpeedListId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SpeedListId"));

                    b.Property<int>("BeastNoteFk")
                        .HasColumnType("int")
                        .HasColumnName("BeastNoteFK");

                    b.Property<int>("DistanceInFeer")
                        .HasColumnType("int");

                    b.Property<int>("SpeedFk")
                        .HasColumnType("int")
                        .HasColumnName("SpeedFK");

                    b.HasKey("SpeedListId");

                    b.HasIndex("BeastNoteFk");

                    b.HasIndex("SpeedFk");

                    b.ToTable("SpeedList", (string)null);
                });

            modelBuilder.Entity("FightManagerWebAPI.Entities.SpellSlot", b =>
                {
                    b.Property<int>("SpellSlotId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SpellSlotId"));

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<int>("SlotLevel")
                        .HasColumnType("int");

                    b.Property<int>("SpellingInfoFk")
                        .HasColumnType("int")
                        .HasColumnName("SpellingInfoFK");

                    b.HasKey("SpellSlotId");

                    b.HasIndex("SpellingInfoFk");

                    b.ToTable("SpellSlot", (string)null);
                });

            modelBuilder.Entity("FightManagerWebAPI.Entities.SpellSlotsList", b =>
                {
                    b.Property<int>("SpellSlotsListId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SpellSlotsListId"));

                    b.Property<int>("BeastFk")
                        .HasColumnType("int")
                        .HasColumnName("BeastFK");

                    b.Property<bool>("CountAvailable")
                        .HasColumnType("bit");

                    b.Property<int>("SlotLevel")
                        .HasColumnType("int");

                    b.HasKey("SpellSlotsListId");

                    b.HasIndex("BeastFk");

                    b.ToTable("SpellSlotsList", (string)null);
                });

            modelBuilder.Entity("FightManagerWebAPI.Entities.SpellingInfo", b =>
                {
                    b.Property<int>("SpellingInfoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SpellingInfoId"));

                    b.Property<int>("AttackBonus")
                        .HasColumnType("int");

                    b.Property<int>("SaveThrowDifficulty")
                        .HasColumnType("int");

                    b.Property<int>("SpellAbilityFk")
                        .HasColumnType("int")
                        .HasColumnName("SpellAbilityFK");

                    b.HasKey("SpellingInfoId");

                    b.HasIndex("SpellAbilityFk");

                    b.ToTable("SpellingInfo", (string)null);
                });

            modelBuilder.Entity("FightManagerWebAPI.Entities.TemporaryAbilityList", b =>
                {
                    b.Property<int>("TemporaryAbilityListId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TemporaryAbilityListId"));

                    b.Property<int>("AbilityFk")
                        .HasColumnType("int")
                        .HasColumnName("AbilityFK");

                    b.Property<int>("BeastFk")
                        .HasColumnType("int")
                        .HasColumnName("BeastFK");

                    b.Property<bool>("SavingThrowProficiency")
                        .HasColumnType("bit");

                    b.Property<int>("Value")
                        .HasColumnType("int");

                    b.HasKey("TemporaryAbilityListId");

                    b.HasIndex("AbilityFk");

                    b.HasIndex("BeastFk");

                    b.ToTable("TemporaryAbilityList", (string)null);
                });

            modelBuilder.Entity("FightManagerWebAPI.Entities.TimeMeasure", b =>
                {
                    b.Property<int>("TimeMeasureId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TimeMeasureId"));

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("TimeMeasureId");

                    b.ToTable("TimeMeasure", (string)null);
                });

            modelBuilder.Entity("FightManagerWebAPI.Entities.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CreatorsTeamFk")
                        .HasColumnType("int")
                        .HasColumnName("CreatorsTeamFK");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("CreatorsTeamFk");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("User", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("FightManagerWebAPI.Entities.AbilityList", b =>
                {
                    b.HasOne("FightManagerWebAPI.Entities.Ability", "AbilityFkNavigation")
                        .WithMany("AbilityLists")
                        .HasForeignKey("AbilityFk")
                        .IsRequired()
                        .HasConstraintName("FK_AbilityList_Ability");

                    b.HasOne("FightManagerWebAPI.Entities.BeastNote", "BeastNoteFkNavigation")
                        .WithMany("AbilityLists")
                        .HasForeignKey("BeastNoteFk")
                        .IsRequired()
                        .HasConstraintName("FK_AbilityList_BeastNote");

                    b.Navigation("AbilityFkNavigation");

                    b.Navigation("BeastNoteFkNavigation");
                });

            modelBuilder.Entity("FightManagerWebAPI.Entities.Action", b =>
                {
                    b.HasOne("FightManagerWebAPI.Entities.ActionResource", "ActionResourceFkNavigation")
                        .WithMany("Actions")
                        .HasForeignKey("ActionResourceFk")
                        .IsRequired()
                        .HasConstraintName("FK_Action_ActionResource");

                    b.HasOne("FightManagerWebAPI.Entities.BeastNote", "BeastNoteFkNavigation")
                        .WithMany("Actions")
                        .HasForeignKey("BeastNoteFk")
                        .IsRequired()
                        .HasConstraintName("FK_Action_BeastNote");

                    b.HasOne("FightManagerWebAPI.Entities.TimeMeasure", "Cooldown3TimeMeasureFkNavigation")
                        .WithMany("Actions")
                        .HasForeignKey("Cooldown3TimeMeasureFk")
                        .HasConstraintName("FK_Action_TimeMeasure");

                    b.HasOne("FightManagerWebAPI.Entities.CooldownType", "CooldownTypeFkNavigation")
                        .WithMany("Actions")
                        .HasForeignKey("CooldownTypeFk")
                        .IsRequired()
                        .HasConstraintName("FK_Action_CooldownType");

                    b.Navigation("ActionResourceFkNavigation");

                    b.Navigation("BeastNoteFkNavigation");

                    b.Navigation("Cooldown3TimeMeasureFkNavigation");

                    b.Navigation("CooldownTypeFkNavigation");
                });

            modelBuilder.Entity("FightManagerWebAPI.Entities.ActionResourceList", b =>
                {
                    b.HasOne("FightManagerWebAPI.Entities.ActionResource", "ActionResourceFkNavigation")
                        .WithMany("ActionResourceLists")
                        .HasForeignKey("ActionResourceFk")
                        .IsRequired()
                        .HasConstraintName("FK_ActionResourceList_ActionResource");

                    b.HasOne("FightManagerWebAPI.Entities.Beast", "BeastFkNavigation")
                        .WithMany("ActionResourceLists")
                        .HasForeignKey("BeastFk")
                        .IsRequired()
                        .HasConstraintName("FK_ActionResourceList_Beast");

                    b.Navigation("ActionResourceFkNavigation");

                    b.Navigation("BeastFkNavigation");
                });

            modelBuilder.Entity("FightManagerWebAPI.Entities.Beast", b =>
                {
                    b.HasOne("FightManagerWebAPI.Entities.BeastNote", "BeastNoteFkNavigation")
                        .WithMany("Beasts")
                        .HasForeignKey("BeastNoteFk")
                        .IsRequired()
                        .HasConstraintName("FK_Beast_BeastNote");

                    b.HasOne("FightManagerWebAPI.Entities.FightTeam", "FightTeamFkNavigation")
                        .WithMany("Beasts")
                        .HasForeignKey("FightTeamFk")
                        .IsRequired()
                        .HasConstraintName("FK_Beast_FightTeam");

                    b.Navigation("BeastNoteFkNavigation");

                    b.Navigation("FightTeamFkNavigation");
                });

            modelBuilder.Entity("FightManagerWebAPI.Entities.BeastList", b =>
                {
                    b.HasOne("FightManagerWebAPI.Entities.Beast", "BeastFkNavigation")
                        .WithMany("BeastLists")
                        .HasForeignKey("BeastFk")
                        .IsRequired()
                        .HasConstraintName("FK_BeastList_Beast");

                    b.HasOne("FightManagerWebAPI.Entities.SceneSave", "SceneSaveFkNavigation")
                        .WithMany("BeastLists")
                        .HasForeignKey("SceneSaveFk")
                        .IsRequired()
                        .HasConstraintName("FK_BeastList_SceneSave");

                    b.Navigation("BeastFkNavigation");

                    b.Navigation("SceneSaveFkNavigation");
                });

            modelBuilder.Entity("FightManagerWebAPI.Entities.BeastNote", b =>
                {
                    b.HasOne("FightManagerWebAPI.Entities.Alignment", "AlingmentFkNavigation")
                        .WithMany("BeastNotes")
                        .HasForeignKey("AlingmentFk")
                        .IsRequired()
                        .HasConstraintName("FK_BeastNote_Alignment");

                    b.HasOne("FightManagerWebAPI.Entities.BeastType", "BeastTypeFkNavigation")
                        .WithMany("BeastNotes")
                        .HasForeignKey("BeastTypeFk")
                        .IsRequired()
                        .HasConstraintName("FK_BeastNote_BeastType");

                    b.HasOne("FightManagerWebAPI.Entities.Size", "SizeFkNavigation")
                        .WithMany("BeastNotes")
                        .HasForeignKey("SizeFk")
                        .IsRequired()
                        .HasConstraintName("FK_BeastNote_Size");

                    b.HasOne("FightManagerWebAPI.Entities.SpellingInfo", "SpellingInfoFkNavigation")
                        .WithMany("BeastNotes")
                        .HasForeignKey("SpellingInfoFk")
                        .HasConstraintName("FK_BeastNote_SpellingInfo");

                    b.HasOne("FightManagerWebAPI.Entities.User", "UserFkNavigation")
                        .WithMany("BeastNotes")
                        .HasForeignKey("UserFk")
                        .IsRequired()
                        .HasConstraintName("FK_BeastNote_User");

                    b.Navigation("AlingmentFkNavigation");

                    b.Navigation("BeastTypeFkNavigation");

                    b.Navigation("SizeFkNavigation");

                    b.Navigation("SpellingInfoFkNavigation");

                    b.Navigation("UserFkNavigation");
                });

            modelBuilder.Entity("FightManagerWebAPI.Entities.ConditionImmuneList", b =>
                {
                    b.HasOne("FightManagerWebAPI.Entities.BeastNote", "BeastNoteFkNavigation")
                        .WithMany("ConditionImmuneLists")
                        .HasForeignKey("BeastNoteFk")
                        .IsRequired()
                        .HasConstraintName("FK_ConditionImmuneList_BeastNote");

                    b.HasOne("FightManagerWebAPI.Entities.Condition", "ConditionFkNavigation")
                        .WithMany("ConditionImmuneLists")
                        .HasForeignKey("ConditionFk")
                        .IsRequired()
                        .HasConstraintName("FK_ConditionImmuneList_Condition");

                    b.Navigation("BeastNoteFkNavigation");

                    b.Navigation("ConditionFkNavigation");
                });

            modelBuilder.Entity("FightManagerWebAPI.Entities.ConditionList", b =>
                {
                    b.HasOne("FightManagerWebAPI.Entities.Beast", "BeastFkNavigation")
                        .WithMany("ConditionLists")
                        .HasForeignKey("BeastFk")
                        .IsRequired()
                        .HasConstraintName("FK_ConditionList_Beast");

                    b.HasOne("FightManagerWebAPI.Entities.Condition", "ConditionFkNavigation")
                        .WithMany("ConditionLists")
                        .HasForeignKey("ConditionFk")
                        .IsRequired()
                        .HasConstraintName("FK_ConditionList_Condition");

                    b.Navigation("BeastFkNavigation");

                    b.Navigation("ConditionFkNavigation");
                });

            modelBuilder.Entity("FightManagerWebAPI.Entities.DamageTendency", b =>
                {
                    b.HasOne("FightManagerWebAPI.Entities.BeastNote", "BeastNoteFkNavigation")
                        .WithMany("DamageTendencies")
                        .HasForeignKey("BeastNoteFk")
                        .IsRequired()
                        .HasConstraintName("FK_DamageTendency_BeastNote");

                    b.HasOne("FightManagerWebAPI.Entities.DamageTendencyType", "DamageTendencyTypeFkNavigation")
                        .WithMany("DamageTendencies")
                        .HasForeignKey("DamageTendencyTypeFk")
                        .IsRequired()
                        .HasConstraintName("FK_DamageTendency_DamageTendencyType");

                    b.HasOne("FightManagerWebAPI.Entities.DamageType", "DamageTypeFkNavigation")
                        .WithMany("DamageTendencies")
                        .HasForeignKey("DamageTypeFk")
                        .IsRequired()
                        .HasConstraintName("FK_DamageTendency_DamageType");

                    b.Navigation("BeastNoteFkNavigation");

                    b.Navigation("DamageTendencyTypeFkNavigation");

                    b.Navigation("DamageTypeFkNavigation");
                });

            modelBuilder.Entity("FightManagerWebAPI.Entities.HabitatList", b =>
                {
                    b.HasOne("FightManagerWebAPI.Entities.BeastNote", "BeastNoteFkNavigation")
                        .WithMany("HabitatLists")
                        .HasForeignKey("BeastNoteFk")
                        .IsRequired()
                        .HasConstraintName("FK_HabitatList_BeastNote");

                    b.HasOne("FightManagerWebAPI.Entities.Habitat", "HabitatFkNavigation")
                        .WithMany("HabitatLists")
                        .HasForeignKey("HabitatFk")
                        .IsRequired()
                        .HasConstraintName("FK_HabitatList_Habitat");

                    b.Navigation("BeastNoteFkNavigation");

                    b.Navigation("HabitatFkNavigation");
                });

            modelBuilder.Entity("FightManagerWebAPI.Entities.Scene", b =>
                {
                    b.HasOne("FightManagerWebAPI.Entities.Setting", "SettingFkNavigation")
                        .WithMany("Scenes")
                        .HasForeignKey("SettingFk")
                        .IsRequired()
                        .HasConstraintName("FK_Scene_Setting");

                    b.HasOne("FightManagerWebAPI.Entities.User", "UserFkNavigation")
                        .WithMany("Scenes")
                        .HasForeignKey("UserFk")
                        .IsRequired()
                        .HasConstraintName("FK_Scene_User");

                    b.Navigation("SettingFkNavigation");

                    b.Navigation("UserFkNavigation");
                });

            modelBuilder.Entity("FightManagerWebAPI.Entities.SceneSave", b =>
                {
                    b.HasOne("FightManagerWebAPI.Entities.Scene", "SceneFkNavigation")
                        .WithMany("SceneSaves")
                        .HasForeignKey("SceneFk")
                        .IsRequired()
                        .HasConstraintName("FK_SceneSave_Scene");

                    b.Navigation("SceneFkNavigation");
                });

            modelBuilder.Entity("FightManagerWebAPI.Entities.SenseList", b =>
                {
                    b.HasOne("FightManagerWebAPI.Entities.BeastNote", "BeastNoteFkNavigation")
                        .WithMany("SenseLists")
                        .HasForeignKey("BeastNoteFk")
                        .IsRequired()
                        .HasConstraintName("FK_SenseList_BeastNote");

                    b.HasOne("FightManagerWebAPI.Entities.Sense", "SenseFkNavigation")
                        .WithMany("SenseLists")
                        .HasForeignKey("SenseFk")
                        .IsRequired()
                        .HasConstraintName("FK_SenseList_Sense");

                    b.Navigation("BeastNoteFkNavigation");

                    b.Navigation("SenseFkNavigation");
                });

            modelBuilder.Entity("FightManagerWebAPI.Entities.Skill", b =>
                {
                    b.HasOne("FightManagerWebAPI.Entities.Ability", "AbilityFkNavigation")
                        .WithMany("Skills")
                        .HasForeignKey("AbilityFk")
                        .IsRequired()
                        .HasConstraintName("FK_Skill_Ability");

                    b.Navigation("AbilityFkNavigation");
                });

            modelBuilder.Entity("FightManagerWebAPI.Entities.SkillList", b =>
                {
                    b.HasOne("FightManagerWebAPI.Entities.BeastNote", "BeastNoteFkNavigation")
                        .WithMany("SkillLists")
                        .HasForeignKey("BeastNoteFk")
                        .IsRequired()
                        .HasConstraintName("FK_SkillList_BeastNote");

                    b.HasOne("FightManagerWebAPI.Entities.Skill", "SkillFkNavigation")
                        .WithMany("SkillLists")
                        .HasForeignKey("SkillFk")
                        .IsRequired()
                        .HasConstraintName("FK_SkillList_Skill");

                    b.Navigation("BeastNoteFkNavigation");

                    b.Navigation("SkillFkNavigation");
                });

            modelBuilder.Entity("FightManagerWebAPI.Entities.SpeedList", b =>
                {
                    b.HasOne("FightManagerWebAPI.Entities.BeastNote", "BeastNoteFkNavigation")
                        .WithMany("SpeedLists")
                        .HasForeignKey("BeastNoteFk")
                        .IsRequired()
                        .HasConstraintName("FK_SpeedList_BeastNote");

                    b.HasOne("FightManagerWebAPI.Entities.Speed", "SpeedFkNavigation")
                        .WithMany("SpeedLists")
                        .HasForeignKey("SpeedFk")
                        .IsRequired()
                        .HasConstraintName("FK_SpeedList_Speed");

                    b.Navigation("BeastNoteFkNavigation");

                    b.Navigation("SpeedFkNavigation");
                });

            modelBuilder.Entity("FightManagerWebAPI.Entities.SpellSlot", b =>
                {
                    b.HasOne("FightManagerWebAPI.Entities.SpellingInfo", "SpellingInfoFkNavigation")
                        .WithMany("SpellSlots")
                        .HasForeignKey("SpellingInfoFk")
                        .IsRequired()
                        .HasConstraintName("FK_SpellSlot_SpellingInfo");

                    b.Navigation("SpellingInfoFkNavigation");
                });

            modelBuilder.Entity("FightManagerWebAPI.Entities.SpellSlotsList", b =>
                {
                    b.HasOne("FightManagerWebAPI.Entities.Beast", "BeastFkNavigation")
                        .WithMany("SpellSlotsLists")
                        .HasForeignKey("BeastFk")
                        .IsRequired()
                        .HasConstraintName("FK_SpellSlotsList_Beast");

                    b.Navigation("BeastFkNavigation");
                });

            modelBuilder.Entity("FightManagerWebAPI.Entities.SpellingInfo", b =>
                {
                    b.HasOne("FightManagerWebAPI.Entities.Ability", "SpellAbilityFkNavigation")
                        .WithMany("SpellingInfos")
                        .HasForeignKey("SpellAbilityFk")
                        .IsRequired()
                        .HasConstraintName("FK_SpellingInfo_Ability");

                    b.Navigation("SpellAbilityFkNavigation");
                });

            modelBuilder.Entity("FightManagerWebAPI.Entities.TemporaryAbilityList", b =>
                {
                    b.HasOne("FightManagerWebAPI.Entities.Ability", "AbilityFkNavigation")
                        .WithMany("TemporaryAbilityLists")
                        .HasForeignKey("AbilityFk")
                        .IsRequired()
                        .HasConstraintName("FK_TemporaryAbilityList_Ability");

                    b.HasOne("FightManagerWebAPI.Entities.Beast", "BeastFkNavigation")
                        .WithMany("TemporaryAbilityLists")
                        .HasForeignKey("BeastFk")
                        .IsRequired()
                        .HasConstraintName("FK_TemporaryAbilityList_Beast");

                    b.Navigation("AbilityFkNavigation");

                    b.Navigation("BeastFkNavigation");
                });

            modelBuilder.Entity("FightManagerWebAPI.Entities.User", b =>
                {
                    b.HasOne("FightManagerWebAPI.Entities.CreatorsTeam", "CreatorsTeamFkNavigation")
                        .WithMany()
                        .HasForeignKey("CreatorsTeamFk")
                        .IsRequired()
                        .HasConstraintName("FK_User_CreatorsTeam");

                    b.Navigation("CreatorsTeamFkNavigation");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("FightManagerWebAPI.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("FightManagerWebAPI.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FightManagerWebAPI.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("FightManagerWebAPI.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FightManagerWebAPI.Entities.Ability", b =>
                {
                    b.Navigation("AbilityLists");

                    b.Navigation("Skills");

                    b.Navigation("SpellingInfos");

                    b.Navigation("TemporaryAbilityLists");
                });

            modelBuilder.Entity("FightManagerWebAPI.Entities.ActionResource", b =>
                {
                    b.Navigation("ActionResourceLists");

                    b.Navigation("Actions");
                });

            modelBuilder.Entity("FightManagerWebAPI.Entities.Alignment", b =>
                {
                    b.Navigation("BeastNotes");
                });

            modelBuilder.Entity("FightManagerWebAPI.Entities.Beast", b =>
                {
                    b.Navigation("ActionResourceLists");

                    b.Navigation("BeastLists");

                    b.Navigation("ConditionLists");

                    b.Navigation("SpellSlotsLists");

                    b.Navigation("TemporaryAbilityLists");
                });

            modelBuilder.Entity("FightManagerWebAPI.Entities.BeastNote", b =>
                {
                    b.Navigation("AbilityLists");

                    b.Navigation("Actions");

                    b.Navigation("Beasts");

                    b.Navigation("ConditionImmuneLists");

                    b.Navigation("DamageTendencies");

                    b.Navigation("HabitatLists");

                    b.Navigation("SenseLists");

                    b.Navigation("SkillLists");

                    b.Navigation("SpeedLists");
                });

            modelBuilder.Entity("FightManagerWebAPI.Entities.BeastType", b =>
                {
                    b.Navigation("BeastNotes");
                });

            modelBuilder.Entity("FightManagerWebAPI.Entities.Condition", b =>
                {
                    b.Navigation("ConditionImmuneLists");

                    b.Navigation("ConditionLists");
                });

            modelBuilder.Entity("FightManagerWebAPI.Entities.CooldownType", b =>
                {
                    b.Navigation("Actions");
                });

            modelBuilder.Entity("FightManagerWebAPI.Entities.DamageTendencyType", b =>
                {
                    b.Navigation("DamageTendencies");
                });

            modelBuilder.Entity("FightManagerWebAPI.Entities.DamageType", b =>
                {
                    b.Navigation("DamageTendencies");
                });

            modelBuilder.Entity("FightManagerWebAPI.Entities.FightTeam", b =>
                {
                    b.Navigation("Beasts");
                });

            modelBuilder.Entity("FightManagerWebAPI.Entities.Habitat", b =>
                {
                    b.Navigation("HabitatLists");
                });

            modelBuilder.Entity("FightManagerWebAPI.Entities.Scene", b =>
                {
                    b.Navigation("SceneSaves");
                });

            modelBuilder.Entity("FightManagerWebAPI.Entities.SceneSave", b =>
                {
                    b.Navigation("BeastLists");
                });

            modelBuilder.Entity("FightManagerWebAPI.Entities.Sense", b =>
                {
                    b.Navigation("SenseLists");
                });

            modelBuilder.Entity("FightManagerWebAPI.Entities.Setting", b =>
                {
                    b.Navigation("Scenes");
                });

            modelBuilder.Entity("FightManagerWebAPI.Entities.Size", b =>
                {
                    b.Navigation("BeastNotes");
                });

            modelBuilder.Entity("FightManagerWebAPI.Entities.Skill", b =>
                {
                    b.Navigation("SkillLists");
                });

            modelBuilder.Entity("FightManagerWebAPI.Entities.Speed", b =>
                {
                    b.Navigation("SpeedLists");
                });

            modelBuilder.Entity("FightManagerWebAPI.Entities.SpellingInfo", b =>
                {
                    b.Navigation("BeastNotes");

                    b.Navigation("SpellSlots");
                });

            modelBuilder.Entity("FightManagerWebAPI.Entities.TimeMeasure", b =>
                {
                    b.Navigation("Actions");
                });

            modelBuilder.Entity("FightManagerWebAPI.Entities.User", b =>
                {
                    b.Navigation("BeastNotes");

                    b.Navigation("Scenes");
                });
#pragma warning restore 612, 618
        }
    }
}
